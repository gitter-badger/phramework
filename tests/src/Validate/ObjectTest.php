<?php

namespace Phramework\Validate;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-05 at 22:11:07.
 */
class ObjectTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Object
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $properties = [
            'str' => new \Phramework\Validate\String(2,4),
            'ok' => new \Phramework\Validate\Boolean(),
        ];

        $this->object = new Object($properties, ['ok']);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function validateSuccessProvider()
    {
        //input
        return [
            [['ok' => true]],
            [(object)['ok' => 'true', 'okk' => '123']],
            [(object)['ok' => false, 'okk' => 'xyz' ]]
        ];
    }

    public function validateFailureProvider()
    {
        //input
        return [
            [1], //not an array or object
            [['ok']], //`ok` is not an object key
            [['abc']],
            [(object)(['okk' => 'hello'])], //because missing ok
            [['ok'=> 'omg', 'okk' => '2', 'xyz' => true]], //because of ok is not boolean
        ];
    }

    /**
     * @dataProvider validateSuccessProvider
     * @covers Phramework\Validate\Object::validate
     */
    public function testValidateSuccess($input)
    {
        $return = $this->object->validate($input);

        $this->assertTrue( $return->status);
        $this->assertInternalType('object', $return->value);

    }

    /**
     * @covers Phramework\Validate\Object::validate
     */
    public function testValidateRecursiveSuccess()
    {
        $validationObject = new Object(
            [
                'order' => (new UnsignedInteger())->setDefault(0),
                'request' => (new Object([
                        'url' => new String(3,256),
                        'method' => (new String(3,10))->setDefault('GET'),
                        'response' => new Object(
                            [
                                'statusCode' => (new UnsignedInteger(100, 999))
                                    ->setDefault(200),
                                'default' => (new UnsignedInteger(100, 999))
                                    ->setDefault(200),
                                'ruleObjects' => (new ArrayValidator())
                            ],
                            ['statusCode', 'ruleObjects']
                        )
                    ],
                    ['url', 'response']
                ))
            ],
            ['request']
        );
        
        $this->assertInstanceOf(BaseValidator::class, $validationObject);
        $this->assertInstanceOf(Object::class, $validationObject);
        $this->assertInstanceOf(
            UnsignedInteger::class,
            $validationObject->properties->order
        );
        $this->assertInstanceOf(
            Object::class,
            $validationObject->properties->request
        );
        $this->assertInstanceOf(
            String::class,
            $validationObject->properties->request->properties->method
        );
        $this->assertSame(
            'GET',
            $validationObject->properties->request->properties->method->default
        );
        $this->assertInstanceOf(
            Object::class,
            $validationObject->properties->request->properties->response
        );
        $this->assertInstanceOf(
            ArrayValidator::class,
            $validationObject->properties->request->properties->response->properties->ruleObjects
        );
        $this->assertInstanceOf(
            UnsignedInteger::class,
            $validationObject->properties->request->properties->response->properties->statusCode
        );
        $this->assertSame(
            200,
            $validationObject->properties->request->properties->response->properties->statusCode->default
        );

        $parsed = $validationObject->parse(
            [
                'order' => 5,
                'request' => [
                    'url' => 'account/',
                    'response' => [
                        'statusCode' => 400,
                        'ruleObjects' => ['abc', 'cda']
                    ]
                ]
            ]
        );

        $this->assertSame(
            5,
            $parsed->order
        );

        $this->assertSame(
            400,
            $parsed->request->response->statusCode
        );

        $this->assertSame(
            200,
            $parsed->request->response->default
        );

        $this->assertInternalType(
            'array',
            $parsed->request->response->ruleObjects
        );
    }
    /**
     * @dataProvider validateFailureProvider
     * @covers Phramework\Validate\Object::validate
     */
    public function testValidateFailure($input)
    {
        $return = $this->object->validate($input);

        $this->assertFalse($return->status);
    }

    /**
      * @covers Phramework\Validate\Object::addProperties
     */
    public function testAddPropertiesSuccess()
    {
        $originalPropertiesCount = count(get_object_vars(
            $this->object->properties
        ));
        $properties = ['new_property' => new Object()];
        $this->object->addProperties($properties);

        //Test if number of properties is increased by count of added properties
        $this->assertEquals(
            $originalPropertiesCount + count($properties),
            count(get_object_vars($this->object->properties))
        );
    }

    /**
      * @covers Phramework\Validate\Object::addProperties
      * @expectedException Exception
     */
    public function testAddPropertiesFailure()
    {
        $properties = 104;
        $this->object->addProperties($properties); //Not an array
    }

    /**
      * @covers Phramework\Validate\Object::addProperty
     */
    public function testAddPropertySuccess()
    {
        $key = 'my_key';
        $property = new Object();
        $this->object->addProperty($key, $property);

        $this->assertTrue(
            array_key_exists($key, $this->object->properties)
        );
    }

    /**
      * @covers Phramework\Validate\Object::addProperty
      * @expectedException Exception
     */
    public function testAddPropertyFailure()
    {
        $property = new Object();
        $this->object->addProperty('new', $property);

        $this->object->addProperty('new', $property); //With same key
    }

    /**
      * @covers Phramework\Validate\Object::addProperty
      * @expectedException PHPUnit_Framework_Error
     */
    public function testAddPropertyFailureInvalidType()
    {
        $property = new Object();
        $this->object->addProperty('new', ['hello' => 'world']);
    }

    /**
     * @covers Phramework\Validate\Object::getType
     */
    public function testGetType()
    {
        $this->assertEquals('object', $this->object->getType());
    }

    /**
     * @covers Phramework\Validate\Object::parse
     */
    public function testParseSuccess()
    {
        $input = [
            'weight' => '5',
            'obj' => [
                'valid' => 'true',
                'number' => 10.2,
            ]
        ];

        $validationObject = new Object(
            [ //properties
                'weight' => new Integer(-10,10, true),
                'obj' => new Object(
                    [ //properties
                        'valid' => new Boolean(),
                        'number' => new Number(0,100),
                        'not_required' => (new Number(0,100))->setDefault(5.5),
                    ],
                    ['valid'] //required
                )
            ],
            ['weight'] //required
        );

        $record = $validationObject->parse($input);

        $this->assertInternalType('object', $record);
        $this->assertInternalType('object', $record->obj);
        $this->assertInternalType('float', $record->obj->not_required);
        $this->assertEquals(5, $record->weight);
        $this->assertTrue( $record->obj->valid);
        $this->assertEquals(5.5, $record->obj->not_required);
    }

    /**
     * @covers Phramework\Validate\Object::parse
     * @expectedException Exception
     * @todo \Phramework\Exceptions\MissingParametersException
     */
    public function testParseFailure()
    {
        $input = [
            'weight' => '5',
            'obj' => [
                //'valid' => 'true',
                'number' => 10.2,
            ]
        ];

        $validationObject = new Object(
            [ //properties
                'weight' => new Integer(-10,10, true),
                'obj' => new Object(
                    [ //properties
                        'valid' => new Boolean(),
                        'number' => new Number(0,100),
                        'not_required' => (new Number(0,100))->setDefault(5.5),
                    ],
                    ['valid'] //required
                )
            ],
            ['weight'] //required
        );

        $record = $validationObject->parse($input);
    }

    /**
     * @covers Phramework\Validate\Object::parse
     * @expectedException Exception
     * @todo \Phramework\Exceptions\IncorrectParametersException
     */
    public function testParseFailure2()
    {
        $input = [
            'weight' => '555', //out of range
            'obj' => [
                'valid' => 'ΝΟΤ_VALID',
                'number' => 10.2
            ]
        ];

        $validationObject = new Object(
            [ //properties
                'weight' => new Integer(-10,10, true),
                'obj' => new Object(
                    [ //properties
                        'valid' => new Boolean(),
                        'number' => new Number(0,100),
                        'not_required' => (new Number(0,100))->setDefault(5),
                    ],
                    ['valid'] //required
                )
            ],
            ['weight'] //required
        );

        $record = $validationObject->parse($input);

        $this->assertInternalType('object', $return->value);
    }
}
